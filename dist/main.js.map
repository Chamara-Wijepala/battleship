{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/modules/classes/Gameboard.js","webpack://battleship/./src/modules/classes/Ship.js","webpack://battleship/./src/modules/classes/Player.js","webpack://battleship/./src/modules/renderDom.js","webpack://battleship/./src/modules/placeShips.js","webpack://battleship/./src/modules/gameOver.js","webpack://battleship/./src/index.js","webpack://battleship/./src/modules/computerAi.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nexport default class Gameboard {\n  constructor() {\n    this.board = [];\n    if (this.board.length !== 100) {\n      this.createBoard();\n    }\n  }\n\n  createBoard() {\n    for (let i = 0; i < 100; i += 1) {\n      this.board.push({ hasShip: false, isHit: false, shipHover: false });\n    }\n  }\n\n  placeShip(coords, ship, direction) {\n    ship.start = coords;\n    ship.direction = direction;\n    for (let i = 0; i < ship.length; i += 1) {\n      if (direction === 'Horizontal') {\n        this.board[coords + i].hasShip = true;\n        this.board[coords + i].shipObject = ship;\n      } else {\n        this.board[coords + i * 10].hasShip = true;\n        this.board[coords + i * 10].shipObject = ship;\n      }\n    }\n  }\n\n  shipHover(coords, ship, direction, collides) {\n    this.board.forEach((square) => {\n      square.shipHover = false;\n    });\n    if (!collides) {\n      for (let i = 0; i < ship.length; i += 1) {\n        if (direction === 'Horizontal') {\n          this.board[coords + i].shipHover = true;\n        } else {\n          this.board[coords + i * 10].shipHover = true;\n        }\n      }\n    }\n  }\n\n  receiveAttack(coords, ship) {\n    this.board[coords].isHit = true;\n    if (this.board[coords].hasShip === true) {\n      ship.hit(coords);\n    }\n  }\n\n  allShipsSunk() {\n    const shipLocations = this.board.filter((square) => square.hasShip === true);\n    return shipLocations.every((square) => square.isHit === true);\n  }\n}\n","class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = [];\n  }\n\n  hit(coords) {\n    if (!Number.isInteger(coords)) {\n      return;\n    }\n    this.hits.push(coords);\n  }\n\n  isSunk() {\n    return this.hits.length === this.length;\n  }\n}\n\nexport default Ship;\n","import Gameboard from './Gameboard';\nimport Ship from './Ship';\n\nexport default class Player {\n  constructor(name) {\n    this.name = name;\n    this.gameBoard = new Gameboard();\n    this.ships = {\n      carrier: new Ship(5),\n      battleship: new Ship(4),\n      cruiser: new Ship(3),\n      submarine: new Ship(3),\n      destroyer: new Ship(2),\n    };\n  }\n}\n","function renderBoard(player, boardElement) {\n  for (let i = 0; i < player.gameBoard.board.length; i += 1) {\n    const square = document.createElement('div');\n    square.classList.add('square');\n    square.dataset.id = i;\n    if (player.gameBoard.board[i].hasShip === true) {\n      square.classList.add('has-ship');\n    }\n    if (player.gameBoard.board[i].isHit === true) {\n      square.classList.add('is-hit');\n    }\n    if (player.gameBoard.board[i].hasShip === true && player.gameBoard.board[i].isHit === true) {\n      square.classList.add('ship-hit');\n    }\n    if (player.gameBoard.board[i].shipHover === true) {\n      square.classList.add('ship-hover');\n    }\n    boardElement.appendChild(square);\n  }\n}\n\nfunction clearBoard(parent) {\n  while (parent.lastChild) {\n    parent.removeChild(parent.lastChild);\n  }\n}\n\nexport {\n  renderBoard,\n  clearBoard,\n};\n","function pickRandomElement(array) {\n  const element = array[Math.floor(Math.random() * array.length)];\n  return element;\n}\n\nfunction findSuitableStart(player, ship, direction) {\n  let suitableStart;\n  if (direction === 'Horizontal') {\n    suitableStart = Math.abs(\n      Math.floor(Math.random() * player.gameBoard.board.length - (ship.length)),\n    );\n  } else {\n    suitableStart = Math.abs(\n      Math.floor(Math.random() * player.gameBoard.board.length - (ship.length * 9)),\n    );\n  }\n  return suitableStart;\n}\n\n// Creates an array of the locations a ship will be placed on and checks if it will collide with the\n// right edge or with other ships.\nfunction checkCollisions(start, ship, player, direction) {\n  const rightCollisions = [9, 19, 29, 39, 49, 59, 69, 79, 89];\n  const leftCollisions = [10, 20, 30, 40, 50, 60, 70, 80, 90];\n  const shipLength = [];\n  for (let i = 0; i < ship.length; i += 1) {\n    if (direction === 'Horizontal') {\n      shipLength.push(start + i);\n    } else {\n      shipLength.push(start + i * 10);\n    }\n  }\n  const filteredShipLength = shipLength.filter((value) => value < 100);\n  const collidesWithRightEdge = shipLength.some(\n    (value) => rightCollisions.some((number) => number === value),\n  );\n  const collidesWithLeftEdge = shipLength.some(\n    (value) => leftCollisions.some((number) => number === value),\n  );\n  const collidesWithBottom = shipLength.some(\n    (value) => value > 99,\n  );\n  const collidesWithShip = filteredShipLength.some(\n    (value) => player.gameBoard.board[value].hasShip,\n  );\n  if ((collidesWithRightEdge && collidesWithLeftEdge) || collidesWithShip || collidesWithBottom) {\n    return true;\n  }\n  return false;\n}\n\nfunction placeShips(player, ship) {\n  const direction = ['Horizontal', 'Vertical'];\n  const randomDirection = pickRandomElement(direction);\n  const start = findSuitableStart(player, ship, randomDirection);\n  const collides = checkCollisions(start, ship, player, randomDirection);\n  if (collides === true) {\n    placeShips(player, ship);\n  } else {\n    player.gameBoard.placeShip(start, ship, randomDirection);\n  }\n}\n\nexport {\n  findSuitableStart,\n  checkCollisions,\n  placeShips,\n};\n","const overlay = document.getElementById('overlay');\nconst overlayButton = document.getElementById('overlay-button');\n\nexport default function gameOver() {\n  overlay.style.display = 'block';\n}\n\noverlayButton.addEventListener('click', () => {\n  window.location.reload();\n});\n","/* eslint-disable no-param-reassign */\nimport './index.css';\nimport Player from './modules/classes/Player';\nimport { renderBoard, clearBoard } from './modules/renderDom';\nimport { placeShips, checkCollisions } from './modules/placeShips';\nimport computerMove from './modules/computerAi';\nimport gameOver from './modules/gameOver';\n\nconst playerBoard = document.getElementById('player-board');\nconst computerBoard = document.getElementById('computer-board');\nconst rotateButton = document.getElementById('rotate-button');\n\nconst humanPlayer = new Player('Human');\nconst computerPlayer = new Player('Computer');\n\nfunction startGame() {\n  renderBoard(humanPlayer, playerBoard);\n  renderBoard(computerPlayer, computerBoard);\n}\n\n// Place computer ships randomly\nconst computerShips = Object.entries(computerPlayer.ships);\ncomputerShips.forEach((ship) => {\n  placeShips(computerPlayer, ship[1]);\n});\n\nlet currentPlayer = humanPlayer;\n\nfunction switchPlayer() {\n  if (currentPlayer === humanPlayer) {\n    currentPlayer = computerPlayer;\n  } else {\n    currentPlayer = humanPlayer;\n  }\n}\n\nfunction updateGame(player, board) {\n  clearBoard(board);\n  renderBoard(player, board);\n}\n\nfunction checkIfGameOver(player) {\n  if (player.gameBoard.allShipsSunk()) {\n    gameOver();\n  }\n}\n\nfunction computerTurn() {\n  computerMove(humanPlayer);\n  switchPlayer();\n  updateGame(humanPlayer, playerBoard);\n  checkIfGameOver(humanPlayer);\n}\n\nlet playerShipNumber = 0;\nconst playerShips = Object.entries(humanPlayer.ships);\n\n// Run receiveAttack on clicked square if currentPlayer is humanPlayer,\n// then switch player and call computerTurn()\ncomputerBoard.addEventListener('click', (e) => {\n  const coords = e.target.dataset.id;\n  if (\n    (currentPlayer === humanPlayer && computerPlayer.gameBoard.board[coords].isHit === false)\n    && playerShipNumber > 4\n  ) {\n    const ship = computerPlayer.gameBoard.board[coords].shipObject;\n    computerPlayer.gameBoard.receiveAttack(coords, ship);\n    switchPlayer();\n    updateGame(computerPlayer, computerBoard);\n    checkIfGameOver(computerPlayer);\n    setTimeout(computerTurn, 300);\n  }\n});\n\nfunction getCurrentShip() {\n  const currentShip = playerShips[playerShipNumber][1];\n  return currentShip;\n}\n\nlet currentDirection = 'Horizontal';\n\n// This function needs to return corrent ship and direction\nfunction getPlayerShipData(e) {\n  const coords = Number(e.target.dataset.id);\n  const currentShip = getCurrentShip();\n  const direction = currentDirection;\n  const collides = checkCollisions(coords, currentShip, humanPlayer, direction);\n  return {\n    coords,\n    currentShip,\n    direction,\n    collides,\n  };\n}\n\n// Displays current ship on playerBoard when hovering over it\nplayerBoard.addEventListener('mousemove', (e) => {\n  if (playerShipNumber < 5) {\n    const shipData = getPlayerShipData(e);\n    humanPlayer.gameBoard.shipHover(\n      shipData.coords,\n      shipData.currentShip,\n      shipData.direction,\n      shipData.collides,\n    );\n    updateGame(humanPlayer, playerBoard);\n  }\n});\n\n// Places a ship on playerBoard when you click on a square\nplayerBoard.addEventListener('click', (e) => {\n  const shipData = getPlayerShipData(e);\n  if (!shipData.collides && playerShipNumber < 5) {\n    humanPlayer.gameBoard.placeShip(\n      shipData.coords,\n      shipData.currentShip,\n      shipData.direction,\n    );\n    playerShipNumber += 1;\n  }\n  updateGame(humanPlayer, playerBoard);\n});\n\nrotateButton.addEventListener('click', () => {\n  if (currentDirection === 'Horizontal') {\n    currentDirection = 'Vertical';\n  } else {\n    currentDirection = 'Horizontal';\n  }\n});\n\nstartGame();\n","function findSuitableLocation(opponentBoard) {\n  const suitableLocations = [];\n  opponentBoard.board.forEach((object, index) => {\n    if (object.isHit === false) {\n      suitableLocations.push(index);\n    }\n  });\n  // return pickRandomElement(suitableLocations);\n  const randomLocation = suitableLocations[Math.floor(Math.random() * suitableLocations.length)];\n  return randomLocation;\n}\n\nexport default function computerMove(humanPlayer) {\n  const coords = findSuitableLocation(humanPlayer.gameBoard);\n  const ship = humanPlayer.gameBoard.board[coords].shipObject;\n  humanPlayer.gameBoard.receiveAttack(coords, ship);\n}\n"],"names":["Gameboard","this","board","length","createBoard","i","push","hasShip","isHit","shipHover","coords","ship","direction","start","shipObject","collides","forEach","square","hit","filter","every","Ship","hits","Number","isInteger","Player","name","gameBoard","ships","carrier","battleship","cruiser","submarine","destroyer","renderBoard","player","boardElement","document","createElement","classList","add","dataset","id","appendChild","checkCollisions","rightCollisions","leftCollisions","shipLength","filteredShipLength","value","collidesWithRightEdge","some","number","collidesWithLeftEdge","collidesWithBottom","collidesWithShip","placeShips","array","randomDirection","Math","floor","random","abs","findSuitableStart","placeShip","overlay","getElementById","addEventListener","window","location","reload","playerBoard","computerBoard","rotateButton","humanPlayer","computerPlayer","Object","entries","currentPlayer","switchPlayer","updateGame","parent","lastChild","removeChild","clearBoard","checkIfGameOver","allShipsSunk","style","display","computerTurn","opponentBoard","suitableLocations","object","index","receiveAttack","computerMove","playerShipNumber","playerShips","e","target","setTimeout","currentDirection","getPlayerShipData","currentShip","shipData"],"sourceRoot":""}